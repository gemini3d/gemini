name: ci

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CTEST_PARALLEL_LEVEL: 2

on:
  push:
    paths:
      - "**.f90"
      - "**.F90"
      - "**.cmake"
      - "**/CMakeLists.txt"
      - ".github/workflows/ci.yml"

jobs:

  linux:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install packages
      run: |
        sudo apt update -yq
        sudo cmake -P scripts/install_prereq.cmake

    - name: Configure multi
      run: cmake --preset multi

    - name: Debug build
      run: cmake --build --preset debug

    - name: Debug unit test
      run: ctest --preset debug -L unit --output-junit test-debug-unit.xml

    - name: Debug core test
      run: ctest --preset debug -LE unit -R "(2dew_fang|2dns_fang)" --output-junit test-debug-core.xml


    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release -L unit --output-junit test-release-unit.xml

    - name: Release core test
      run: ctest --preset release -LE unit -E 3d --output-junit test-release-core.xml

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: build/test-*.xml


  linux-gcc7:
    # NOTE: GCC < 7.5 is not supported by Gemini in general
    needs: linux
    runs-on: ubuntu-18.04
    timeout-minutes: 10

    env:
      DEBIAN_FRONTEND: noninteractive
      CC: gcc-7
      CXX: g++-7
      FC: gfortran-7

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install packages
      run: |
        sudo apt update -yq
        sudo cmake -P scripts/install_prereq.cmake
        cmake -P scripts/install_ninja.cmake
        echo "${HOME}/ninja-1.10.2" >> $GITHUB_PATH

    - name: Configure multi
      run: cmake --preset multi

    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release -L unit

    - name: Release core test
      run: ctest --preset release -LE unit -E 3d


  linux-intel-oneapi:
    needs: linux
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI
      timeout-minutes: 5
      run: sudo apt-get install intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-mkl ninja-build

    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Configure multi
      env:
        CC: icx
        FC: ifort
        MPI_ROOT: ${{ env.I_MPI_ROOT }}
      run: cmake --preset multi

    - name: Debug build
      run: cmake --build --preset debug

    - name: Debug unit test
      run: ctest --preset debug -L unit --output-junit test-debug-unit-oneapi.xml

    - name: Debug core test
      run: ctest --preset debug -LE unit -R "(2dew_fang|2dns_fang)" --output-junit test-debug-core-oneapi.xml


    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release -L unit --output-junit test-release-unit-oneapi.xml

    - name: Release core test
      run: ctest --preset release -LE unit -E 3d --output-junit test-release-core-oneapi.xml


  macos:
    runs-on: macos-latest
    needs: linux

    env:
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      FC: gfortran-11

    steps:
    - uses: actions/checkout@v2

    - run: cmake -P scripts/install_prereq.cmake
      timeout-minutes: 15

    - name: Configure multi
      run: cmake --preset multi

    - name: Debug build
      run: cmake --build --preset debug

    - name: Debug unit test
      run: ctest --preset debug -L unit

    - name: Debug core test
      run: ctest --preset debug -LE unit -R "(2dew_fang|2dns_fang)"


    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release -L unit

    - name: Release core test
      run: ctest --preset release -LE unit -E 3d


  windows_no_mpi:
    # it's tricky to install mpiexec automatically on Windows (see p4est)
    # thus it's convenient to use Windows as a no-MPI, no-hwloc test case
    timeout-minutes: 20
    runs-on: windows-latest
    needs: linux

    env:
      CTEST_PARALLEL_LEVEL: 2

    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-hdf5
          mingw-w64-x86_64-lapack

    - uses: actions/checkout@v2

    - name: Configure multi
      run: cmake -Dmpi=no --preset multi


    - name: Debug build
      run: cmake --build --preset debug

    - name: Debug unit test
      run: ctest --preset debug -L unit

    - name: Debug core test
      run: ctest --preset debug -LE unit -R "(2dew_fang|2dns_fang)"


    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release -L unit

    - name: Release core test
      run: ctest --preset release -LE unit -E 3d
